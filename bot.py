# -*- coding: utf-8 -*-
"""
TripleA Travel Survey Bot ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å –¥–ª—è —Ç—É—Ä—Ñ–∏—Ä–º (RU/UZ).
–°—Ç–µ–∫: FastAPI (webhook), Aiogram v3, gspread (Google Sheets), Render-ready.

ENV VARS REQUIRED
-----------------
BOT_TOKEN=...                           # Telegram bot token
WEBHOOK_URL=https://your-service.onrender.com/webhook
GOOGLE_SERVICE_ACCOUNT_JSON=...         # raw JSON of service account (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
SHEET_ID=...                            # Google Sheet spreadsheet ID

OPTIONAL
--------
ADMINS=123456789,987654321              # –∫–æ–º—É —Å–ª–∞—Ç—å –∞–ª–µ—Ä—Ç—ã –æ –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç–∞—Ö
TZ=Asia/Tashkent                        # —Ç–∞–π–º–∑–æ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Asia/Tashkent)

–ó–∞–ø—É—Å–∫ –Ω–∞ Render:
uvicorn bot:app --host 0.0.0.0 --port 10000
"""

import os
import json
import logging
from typing import Dict, List

from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse, JSONResponse

from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardRemove,
)

import gspread
from datetime import datetime
from zoneinfo import ZoneInfo

# ---------- –ö–æ–Ω—Ñ–∏–≥ ----------
BOT_TOKEN = os.environ["BOT_TOKEN"]
WEBHOOK_URL = os.environ["WEBHOOK_URL"]
SHEET_ID = os.environ["SHEET_ID"]
SERVICE_JSON_RAW = os.environ["GOOGLE_SERVICE_ACCOUNT_JSON"]
ADMINS = [int(x) for x in os.getenv("ADMINS", "").replace(" ", "").split(",") if x]
TZ = os.getenv("TZ", "Asia/Tashkent")

# ---------- –õ–æ–≥–∏ ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("triplea.survey")

# ---------- Google Sheets ----------
sa_info = json.loads(SERVICE_JSON_RAW)
gc = gspread.service_account_from_dict(sa_info)
sh = gc.open_by_key(SHEET_ID)
try:
    ws = sh.worksheet("Survey")
except gspread.WorksheetNotFound:
    ws = sh.add_worksheet(title="Survey", rows=2000, cols=20)
    ws.append_row([
        "timestamp", "user_id", "username", "lang",
        "agg_interest", "agg_values",
        "pain_points", "expectations",
        "contact"
    ])

# ---------- RU/UZ —Ç–µ–∫—Å—Ç—ã –∏ –æ–ø—Ü–∏–∏ ----------
RU = "ru"
UZ = "uz"

TEXT: Dict[str, Dict[str, str]] = {
    "choose_lang": {RU: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ ‚§µÔ∏è", UZ: "Tilni tanlang ‚§µÔ∏è"},
    "lang_ru": {RU: "–†—É—Å—Å–∫–∏–π", UZ: "Ruscha"},
    "lang_uz": {RU: "–£–∑–±–µ–∫—Å–∫–∏–π", UZ: "O‚Äòzbekcha"},
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: –∫—Ç–æ –º—ã –∏ —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º
    "welcome": {
        RU: (
            "<b>–ú—ã ‚Äî TripleA Travel</b> (—Å—Ç–∞—Ä—Ç–∞–ø –∏–∑ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞). "
            "–î–µ–ª–∞–µ–º <b>Telegram-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –∑–∞—è–≤–æ–∫</b> –¥–ª—è —Ç—É—Ä—Ñ–∏—Ä–º: –µ–¥–∏–Ω–∞—è –ª–µ–Ω—Ç–∞ –ª–∏–¥–æ–≤, –±—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤, "
            "–æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ –∏ –±–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞. –ò—â–µ–º 10‚Äì15 –ø–∏–ª–æ—Ç–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ "
            "–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π MVP –Ω–∞ –º–µ—Å—è—Ü.\n\n"
            "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å (5 –≤–æ–ø—Ä–æ—Å–æ–≤) –ø—Ä–æ –∏–Ω—Ç–µ—Ä–µ—Å, –±–æ–ª–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏—è. –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /cancel.\n\n"
            "<b>1/5 ‚Äî –ò–Ω—Ç–µ—Ä–µ—Å–µ–Ω –ª–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –≤ Telegram?</b>"
        ),
        UZ: (
            "<b>Biz ‚Äî TripleA Travel</b> (O‚Äòzbekiston startapi). "
            "Turfirmalar uchun <b>Telegramda arizalar agregatori</b> qilmoqdamiz: yagona lead-lenta, tezkor javob "
            "shablonlari, onlayn to‚Äòlov va oddiy analitika. Pilot uchun 10‚Äì15 ta agentlik izlaymiz, fikr-mulohaza "
            "to‚Äòplash va 1 oylik bepul MVP ishga tushirish uchun.\n\n"
            "Qisqa so‚Äòrov (5 ta savol): qiziqish, og‚Äòriqlar va kutilyotgan natijalar. /cancel bilan to‚Äòxtatish mumkin.\n\n"
            "<b>1/5 ‚Äî Telegramdagi agregator sizga qiziqmi?</b>"
        ),
    },
    "cancelled": {
        RU: "–û–∫, –æ–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ /start.",
        UZ: "Yaxshi, so‚Äòrovnoma bekor qilindi. /start bilan qayta boshlashingiz mumkin."
    },
    "q_agg_int": {
        RU: "<b>1/5 ‚Äî –ò–Ω—Ç–µ—Ä–µ—Å–µ–Ω –ª–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –≤ Telegram?</b>",
        UZ: "<b>1/5 ‚Äî Telegramdagi agregator sizga qiziqmi?</b>",
    },
    "q_vals_open": {
        RU: "<b>2/5 ‚Äî –ß—Ç–æ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–µ?</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç(—ã) –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        UZ: "<b>2/5 ‚Äî Agregatorda eng muhim narsa nima?</b>\nVariant(lar)ni tanlab ¬´Tayyor¬ª tugmasini bosing.",
    },
    "q_vals_tap": {
        RU: "<b>2/5 ‚Äî –ß—Ç–æ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–µ?</b>\n–¢–∞–ø–∞–π—Ç–µ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º, –∑–∞—Ç–µ–º ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        UZ: "<b>2/5 ‚Äî Agregatorda eng muhim narsa nima?</b>\nVariantlarga bosing, so‚Äòng ¬´Tayyor¬ª.",
    },
    "q_pain": {
        RU: "<b>3/5 ‚Äî –ö–∞–∫–∏–µ –≥–ª–∞–≤–Ω—ã–µ –±–æ–ª–∏/—É–∑–∫–∏–µ –º–µ—Å—Ç–∞ —Å–µ–π—á–∞—Å?</b>\n(—Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç)",
        UZ: "<b>3/5 ‚Äî Hozirgi asosiy muammolar/tor joylar nimalar?</b>\n(ozod javob)",
    },
    "q_expect": {
        RU: "<b>4/5 ‚Äî –ß—Ç–æ –¥–ª—è –≤–∞—Å –±—É–¥–µ—Ç —É—Å–ø–µ—Ö–æ–º —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è?</b>\n(—Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç)",
        UZ: "<b>4/5 ‚Äî Bir oyda qanday natija muvaffaqiyat deb hisoblaysiz?</b>\n(ozod javob)",
    },
    "q_contact": {
        RU: "<b>5/5 ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏</b> (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username)",
        UZ: "<b>5/5 ‚Äî Aloqa uchun kontakt</b> (telefon yoki @username)",
    },
    "thanks": {
        RU: "–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–µ–º–æ üöÄ",
        UZ: "Rahmat! So‚Äòrovnoma saqlandi. Demosi uchun siz bilan bog‚Äòlanamiz üöÄ",
    },
    "open_variants": {RU: "–û—Ç–∫—Ä—ã—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã", UZ: "Variantlarni ochish"},
    "done": {RU: "‚úÖ –ì–æ—Ç–æ–≤–æ", UZ: "‚úÖ Tayyor"},
    "saved_choice": {RU: "–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω", UZ: "Tanlov saqlandi"},
    "cancel_btn": {RU: "–û—Ç–º–µ–Ω–∏—Ç—å", UZ: "Bekor qilish"},
}

OPTIONS = {
    "AGG_INT": {
        RU: ["–î–∞, –æ—á–µ–Ω—å", "–í–æ–∑–º–æ–∂–Ω–æ", "–ù–µ—Ç"],
        UZ: ["Ha, juda qiziq", "Balki", "Yo‚Äòq"],
    },
    "AGG_VALUES": {
        RU: ["–ë–æ–ª—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–∞–º–∏", "–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞",
             "–û—Ç—á—ë—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤"],
        UZ: ["Ko‚Äòproq mijozlar", "Turlarni boshqarish", "Onlayn to‚Äòlov",
             "Hisobot va analitika", "Mijozlar fikrlari"],
    },
}

# –ø—Ä–µ–¥—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ—Ç ¬´–∑–∞–≤–∏—Å–∞–Ω–∏–µ¬ª)
AGG_INT_ALL = tuple(OPTIONS["AGG_INT"][RU] + OPTIONS["AGG_INT"][UZ])

# ---------- FSM ----------
class Survey(StatesGroup):
    lang = State()
    agg_interest = State()
    agg_values = State()
    pain = State()
    expect = State()
    contact = State()

# ---------- –¢–µ–ª–µ–≥–∞ ----------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
rt = Router()
dp.include_router(rt)

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
HIDE_KB = ReplyKeyboardRemove(remove_keyboard=True)

def t(key: str, lang: str) -> str:
    return TEXT[key][lang]

def opts(name: str, lang: str) -> List[str]:
    return OPTIONS[name][lang]

def kb_rows(options: List[str], lang: str, row: int = 2) -> ReplyKeyboardMarkup:
    btns: List[List[KeyboardButton]] = []
    chunk: List[KeyboardButton] = []
    for i, o in enumerate(options, 1):
        chunk.append(KeyboardButton(text=o))
        if i % row == 0:
            btns.append(chunk); chunk = []
    if chunk:
        btns.append(chunk)
    btns.append([KeyboardButton(text=t("cancel_btn", lang))])
    return ReplyKeyboardMarkup(keyboard=btns, resize_keyboard=True)

def inline_multi(options: List[str], lang: str, prefix: str) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    for i, o in enumerate(options):
        rows.append([InlineKeyboardButton(text=f"‚ñ´Ô∏è {o}", callback_data=f"{prefix}:toggle:{i}")])
    rows.append([InlineKeyboardButton(text=t("done", lang), callback_data=f"{prefix}:done")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def now_ts() -> str:
    return datetime.now(ZoneInfo(TZ)).strftime("%Y-%m-%d %H:%M:%S")

async def get_lang(state: FSMContext) -> str:
    data = await state.get_data()
    return data.get("lang", RU)

def normalize_contact(txt: str) -> str:
    t_ = (txt or "").strip()
    if t_.startswith("+") and t_[1:].replace(" ", "").isdigit():
        return t_
    if t_.startswith("@") and len(t_) > 1:
        return t_
    digits = "".join(ch for ch in t_ if ch.isdigit() or ch == "+")
    return digits if digits else t_

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
@rt.message(CommandStart())
async def cmd_start(m: Message, state: FSMContext):
    await state.clear()
    # –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    ikb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=TEXT["lang_ru"][RU], callback_data="lang:ru"),
        InlineKeyboardButton(text=TEXT["lang_uz"][UZ], callback_data="lang:uz"),
    ]])
    await m.answer(TEXT["choose_lang"][RU], reply_markup=HIDE_KB)
    await m.answer(TEXT["choose_lang"][UZ], reply_markup=ikb)
    await state.set_state(Survey.lang)

@rt.callback_query(Survey.lang, F.data.in_(["lang:ru", "lang:uz"]))
async def pick_lang(cb: CallbackQuery, state: FSMContext):
    lang = RU if cb.data.endswith("ru") else UZ
    await state.update_data(lang=lang)
    await cb.message.edit_reply_markup(reply_markup=None)
    # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await cb.message.answer(
        t("welcome", lang),
        reply_markup=kb_rows(opts("AGG_INT", lang), lang),
    )
    await state.set_state(Survey.agg_interest)
    await cb.answer()

@rt.message(Command("cancel"))
async def cancel(m: Message, state: FSMContext):
    await state.clear()
    await m.answer(TEXT["cancelled"][RU], reply_markup=HIDE_KB)

@rt.message(Command("help"))
async def help_cmd(m: Message, state: FSMContext):
    lang = await get_lang(state)
    txt = "–ö–æ–º–∞–Ω–¥—ã: /start ‚Äî –Ω–∞—á–∞—Ç—å, /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å." if lang == RU else \
          "Buyruqlar: /start ‚Äî boshlash, /cancel ‚Äî bekor qilish."
    await m.answer(txt)

# ---------- –®–∞–≥–∏ ----------
# 1) –ò–Ω—Ç–µ—Ä–µ—Å
@rt.message(Survey.agg_interest, F.text.in_(AGG_INT_ALL))
async def step_agg_interest(m: Message, state: FSMContext):
    lang = await get_lang(state)
    await state.update_data(agg_interest=m.text)
    open_btn = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=t("open_variants", lang), callback_data="vals:open")
    ]])
    await m.answer(t("q_vals_open", lang), reply_markup=open_btn)
    await state.set_state(Survey.agg_values)

# Fallback –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—á—Ç–æ–±—ã –±–æ—Ç –Ω–µ ¬´–º–æ–ª—á–∞–ª¬ª)
@rt.message(Survey.agg_interest)
async def step_agg_interest_retry(m: Message, state: FSMContext):
    lang = await get_lang(state)
    await m.answer(t("q_agg_int", lang), reply_markup=kb_rows(opts("AGG_INT", lang), lang))

# 2) –¶–µ–Ω–Ω–æ—Å—Ç–∏ (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)
@rt.callback_query(Survey.agg_values, F.data == "vals:open")
async def vals_open(cb: CallbackQuery, state: FSMContext):
    lang = await get_lang(state)
    await cb.message.edit_text(t("q_vals_tap", lang),
                               reply_markup=inline_multi(opts("AGG_VALUES", lang), lang, "vals"))
    await cb.answer()

async def toggle_multi(cb: CallbackQuery, state: FSMContext, key: str, options: List[str], prefix: str):
    data = await state.get_data()
    picked: List[int] = data.get(key, [])
    parts = cb.data.split(":")
    _, action, idx = parts[0], parts[1], (int(parts[2]) if len(parts) > 2 else None)

    if action == "toggle" and idx is not None:
        if idx in picked:
            picked.remove(idx)
        else:
            picked.append(idx)
        await state.update_data(**{key: picked})
        rows = []
        for i, o in enumerate(options):
            mark = "‚úÖ" if i in picked else "‚ñ´Ô∏è"
            rows.append([InlineKeyboardButton(text=f"{mark} {o}", callback_data=f"{prefix}:toggle:{i}")])
        lang = (await state.get_data()).get("lang", RU)
        rows.append([InlineKeyboardButton(text=t("done", lang), callback_data=f"{prefix}:done")])
        # –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: –∏–Ω–∞—á–µ pydantic_core –±—É–¥–µ—Ç —Ä—É–≥–∞—Ç—å—Å—è
        await cb.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))
        await cb.answer()
    elif action == "done":
        lang = (await state.get_data()).get("lang", RU)
        await cb.answer(t("saved_choice", lang), show_alert=False)

@rt.callback_query(Survey.agg_values, F.data.startswith("vals:toggle:"))
async def vals_toggle(cb: CallbackQuery, state: FSMContext):
    lang = await get_lang(state)
    await toggle_multi(cb, state, "vals_idx", opts("AGG_VALUES", lang), "vals")

@rt.callback_query(Survey.agg_values, F.data == "vals:done")
async def vals_done(cb: CallbackQuery, state: FSMContext):
    lang = await get_lang(state)
    await cb.message.edit_reply_markup(reply_markup=None)
    await cb.message.answer(t("q_pain", lang), reply_markup=HIDE_KB)
    await state.set_state(Survey.pain)
    await cb.answer()

# 3) –ë–æ–ª–∏
@rt.message(Survey.pain)
async def step_pain(m: Message, state: FSMContext):
    lang = await get_lang(state)
    if not m.text or m.text.lower() in {"–æ—Ç–º–µ–Ω–∏—Ç—å", "bekor qilish"}:
        return await cancel(m, state)
    await state.update_data(pain_points=m.text.strip())
    await m.answer(t("q_expect", lang), reply_markup=HIDE_KB)
    await state.set_state(Survey.expect)

# 4) –û–∂–∏–¥–∞–Ω–∏—è
@rt.message(Survey.expect)
async def step_expect(m: Message, state: FSMContext):
    lang = await get_lang(state)
    if not m.text or m.text.lower() in {"–æ—Ç–º–µ–Ω–∏—Ç—å", "bekor qilish"}:
        return await cancel(m, state)
    await state.update_data(expectations=m.text.strip())
    await m.answer(t("q_contact", lang), reply_markup=HIDE_KB)
    await state.set_state(Survey.contact)

# 5) –ö–æ–Ω—Ç–∞–∫—Ç + –∑–∞–ø–∏—Å—å
@rt.message(Survey.contact)
async def step_contact(m: Message, state: FSMContext):
    lang = await get_lang(state)
    contact = normalize_contact(m.text or "")
    await state.update_data(contact=contact)

    data = await state.get_data()
    user = m.from_user

    def map_multi(key_idx: str, options: List[str]) -> str:
        idxs = data.get(key_idx, [])
        return ", ".join(options[i] for i in sorted(set(idxs))) if idxs else ""

    row = [
        now_ts(),
        str(user.id),
        (user.username or ""),
        lang,
        data.get("agg_interest", ""),
        map_multi("vals_idx", opts("AGG_VALUES", lang)),
        data.get("pain_points", ""),
        data.get("expectations", ""),
        data.get("contact", ""),
    ]
    try:
        ws.append_row(row)
    except Exception:
        log.exception("Append to sheet failed")
        warn = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." if lang == RU \
            else "‚ö†Ô∏è Jadvalga saqlashda xatolik. Keyinroq urinib ko‚Äòring."
        await m.answer(warn)
        return

    # –ê–ª–µ—Ä—Ç –∞–¥–º–∏–Ω–∞–º
    summary = (
        f"<b>[{lang.upper()}] –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞</b>\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å: {data.get('agg_interest')}\n"
        f"–¶–µ–Ω–Ω–æ—Å—Ç–∏: {map_multi('vals_idx', opts('AGG_VALUES', lang))}\n"
        f"–ë–æ–ª–∏: {data.get('pain_points')}\n"
        f"–û–∂–∏–¥–∞–Ω–∏—è: {data.get('expectations')}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n"
        f"‚Äî @{user.username or '‚Äî'} | {user.id}"
    )
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, summary)
        except Exception:
            pass

    await m.answer(t("thanks", lang), reply_markup=ReplyKeyboardRemove())
    await state.clear()

# ---------- FastAPI / webhook ----------
app = FastAPI()

@app.get("/", include_in_schema=False)
async def root_health():
    return JSONResponse({"status": "ok", "service": "TravelOprosnik", "time": datetime.utcnow().isoformat()})

@app.get("/healthz", include_in_schema=False)
async def healthz():
    return PlainTextResponse("ok", status_code=200)

@app.get("/webhook", include_in_schema=False)
async def webhook_ping():
    return PlainTextResponse("ok", status_code=200)

@app.post("/webhook")
async def telegram_webhook(request: Request):
    update = await request.json()
    await dp.feed_webhook_update(bot, update)
    return PlainTextResponse("ok")

@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(
        url=WEBHOOK_URL,
        drop_pending_updates=True,
    )
    log.info("Webhook set: %s", WEBHOOK_URL)

@app.on_event("shutdown")
async def on_shutdown():
    try:
        await bot.delete_webhook(drop_pending_updates=False)
    except Exception:
        pass
